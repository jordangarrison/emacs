* Interface
** General
  Get rid of the start screen,
  Remove the tool bar from the top,
  Turn yes or no into y or n,
  and, Refresh buffer with <f5>
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)
  #+END_SRC
  Set tabs at the top of the screen
  #+BEGIN_SRC emacs-lisp
    (use-package tabbar
      :ensure t
      :config
      (tabbar-mode 1))
  #+END_SRC
  Set up tabbar-ruler
  #+BEGIN_SRC emacs-lisp
    (use-package tabbar-ruler
      :ensure t)
    (setq tabbar-ruler-global-tabbar t)
    (global-set-key (kbd "C-c t") 'tabbar-ruler-move)
    (require 'tabbar-ruler)
  #+END_SRC
  Change stupid audible bell to something actually useful...
  (flashes bottom line with mild orange)
  #+BEGIN_SRC emacs-lisp
    (setq ring-bell-function
	  (lambda ()
	    (let ((orig-fg (face-foreground 'mode-line)))
	      (set-face-foreground 'mode-line "#F2804F")
	      (run-with-idle-timer 0.1 nil
				   (lambda (fg) (set-face-foreground 'mode-line fg))
				   orig-fg))))
  #+END_SRC
** Theme
  Color theme stuff (currently not wanted)
  #+BEGIN_SRC emacs-lisp
    ;; (use-package color-theme
    ;;   :ensure t)
  #+END_SRC
  My color theme
  #+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :ensure t)
    (use-package cyberpunk-theme
      :ensure t)
    (use-package avk-emacs-themes
      :ensure t)
    (use-package challenger-deep-theme
      :ensure t)
    (load-theme 'cyberpunk t)
  #+END_SRC

  #+RESULTS:
  : t

* Try
  Enable try, lets you try packages without installing them
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC
* Which key
  Bring up help on keybaord hints
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC
* i-do setup
  Set i-do mode
  #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq id-everywhere t)
    (ido-mode 1)
  #+END_SRC
  Set up buffers to use ibuffer
  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)
    ;; (defalias 'list-buffers 'ibuffer-other-window)  
  #+END_SRC
  Set up fuzzy like search
  #+BEGIN_SRC emacs-lisp
    (use-package find-file-in-repository
      :ensure t)
    (use-package ido
      :ensure t)
    (use-package ido-completing-read+
      :ensure t)
    (use-package ido-vertical-mode
      :ensure t)
    (global-set-key (kbd "C-x f") 'find-file-in-repository)
    (ido-ubiquitous-mode 1)
    (ido-vertical-mode 1)
    (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
  #+END_SRC

  #+RESULTS:
  : C-n-C-p-up-down-left-right

* Movement
** Windmove
   Set up easy movement between windows   
   #+BEGIN_SRC emacs-lisp
     (windmove-default-keybindings)
   #+END_SRC
** Ace Window
   Set up ace-window move to take over C-c o
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :ensure t
       :init
       (progn
	 (global-set-key [remap other-window] 'ace-window)
	 (custom-set-faces
	  '(aw-leading-char-face
	    ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
	 ))
   #+END_SRC
* Search
** Counsel
   Counsel requirement to swiper
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :ensure t
       :bind
       (("M-y" . counsel-yank-pop)
	:map ivy-minibuffer-map
	("M-y" . ivy-next-line)
	("C-w" . ivy-yank-word)))
   #+END_SRC
** Swiper
   Set up Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :init
       (progn
	 (ivy-mode 1)
	 (setq ivy-use-virtual-buffers t)
	 (setq ive-display-style 'fancy)
	 (global-set-key "\C-s" 'swiper)
	 (global-set-key (kbd "C-c C-r") 'ivy-resume)
	 (global-set-key (kbd "<f6>") 'ivy-resume)
	 (global-set-key (kbd "M-x") 'counsel-M-x)
	 (global-set-key (kbd "C-x C-f") 'counsel-find-file)
	 (global-set-key (kbd "<f1> f") 'counsel-describe-function)
	 (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	 (global-set-key (kbd "<f1> l") 'counsel-load-library)
	 (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
	 (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
	 (global-set-key (kbd "C-c g") 'counsel-git)
	 (global-set-key (kbd "C-c j") 'counsel-git-grep)
	 (global-set-key (kbd "C-c k") 'counsel-ag)
	 (global-set-key (kbd "C-x l") 'counsel-locate)
	 (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	 (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	 ))
    #+END_SRC
* Avy
  Set up Avy
  #+BEGIN_SRC emacs-lisp
    ;; (use-package avy
     ;; :ensure t
     ;; :bind ("M-s" . avy-goto-char))
  #+END_SRC
* Auto completion
  Set up autocomplete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
	(ac-config-default)
	(global-auto-complete-mode t)))
  #+END_SRC
* Company mode
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
* Backup and Autosave
** Turn off the backup and autosave files
   #+BEGIN_SRC emacs-lisp
     ;; (setq make-backup-files nil) ; stop creating backup~ files
     (setq auto-save-default nil) ; stop creating #autosave# files
   #+END_SRC
** Set backup directory
   #+BEGIN_SRC emacs-lisp
     (defun my-backup-file-name (fpath)
       "Return a new file path of a given file path.
     If the new path's directories does not exist, create them."
       (let* (
              (backupRootDir "~/.emacs.d/emacs-backup/")
              (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
              (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
              )
         (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
         backupFilePath
         )
       )

     (setq make-backup-file-name-function 'my-backup-file-name)
   #+END_SRC
* Development
** Python
*** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :ensure t
        :init
        (global-flycheck-mode t))
    #+END_SRC
*** Jedi
    #+BEGIN_SRC emacs-lisp
      (use-package jedi
        :ensure t
        :init
        (add-hook 'python-mode-hook 'jedi:setup)
        (add-hook 'python-mode-hook 'jedi:ac-setup))
    #+END_SRC

*** Yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :ensure t
        :config
        (elpy-enable))
      (use-package yasnippet
        :ensure t
        :init
        (yas-global-mode 1))
    #+END_SRC

** Go
*** Set up gopath
    #+BEGIN_SRC emacs-lisp
      (when (memq window-system '(mac ns))
        (exec-path-from-shell-initialize)
        (exec-path-from-shell-copy-env "GOPATH"))
    #+END_SRC

    #+RESULTS:

*** Go mode function call
    #+BEGIN_SRC emacs-lisp
      (defun my-go-mode-hook ()
        (add-hook 'before-save-hook 'gofmt-before-save)
        (setq gofmt-command "goimports")
        (if (not (string-match "go" compile-command))
            (set (make-local-variable 'compile-command)
                 "go build -v && go test -v && go vet"))
        ;; guru settings
        (go-guru-hl-identifier-mode)
        ;; Keybindings specific to go mode
        (local-set-key (kbd "M-.") 'godef-jump)
        (local-set-key (kbd "M-*") 'pop-tag-mark)
        (local-set-key (kbd "M-p") 'compile)
        (local-set-key (kbd "M-P") 'recompile)
        (local-set-key (kbd "M-]") 'next-error)
        (local-set-key (kbd "M-[") 'previous-error)
        ;; turn on autocomplete
        (auto-complete-mode 1))
      (add-hook 'go-mode-hook 'my-go-mode-hook)
    #+END_SRC

    #+RESULTS:
    | my-go-mode-hook |

*** Use go mode stuff for autocomplete
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode
        :ensure t)
      (use-package go-autocomplete
        :ensure t)
      (with-eval-after-load 'go-mode
        (require 'go-autocomplete))
    #+END_SRC

    #+RESULTS:
    : go-autocomplete

** Yaml
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t)
   #+END_SRC

   #+RESULTS:

** Ruby
*** Syntax checking
    #+BEGIN_SRC emacs-lisp
      (require 'flymake-ruby)
      (add-hook 'ruby-mode-hook 'flymake-ruby-load)
    #+END_SRC
*** Sane indentation
    #+BEGIN_SRC emacs-lisp
      (setq ruby-deep-indent-paren nil)
    #+END_SRC
*** Ruby shell inside emacs
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c r r") 'inf-ruby)
    #+END_SRC
** Chef
   Install Chef mode
   #+BEGIN_SRC emacs-lisp
     (use-package chef-mode
       :ensure t)
   #+END_SRC

   #+RESULTS:

** Markdown
   Get lots of packages for markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t)
     (use-package markdown-mode+
       :ensure t)
     (use-package markdown-toc
       :ensure t)
     (use-package markdownfmt
       :ensure t)
     (use-package markdown-preview-eww
       :ensure t)
   #+END_SRC

   #+RESULTS:

** Parenthesis
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t)
     (use-package evil-smartparens
       :ensure t)
     (smartparens-global-mode t)
   #+END_SRC

   #+RESULTS:
   : t

* Presentations
** Reveal.js
   Set up better org mode
   # #+BEGIN_SRC emacs-lisp
   #   (unless package-archive-contents
   #     (package-refresh-contents))
   #   (setq package-load-list '(all))
   #   (unless (package-installed-p 'org)
   #     (package-install 'org))
   #   (package-initialize) 
   # #+END_SRC
   # Use the following to create powerpoint-like presentations with Reveal.js
   # #+BEGIN_SRC emacs-lisp
   #   (use-package ox-reveal
   #     :ensure ox-reveal)
   #   (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
   #   (setq org-reveal-mathjax t)
   # #+END_SRC
* SQL
** Dev Monitor
*** Setup
*** Hooks
    #+BEGIN_SRC emacs-lisp
      (add-hook 'sql-interactive-mode-hook
                (lambda ()
                  (toggle-truncate-lines t)
                  (setq-local show-trailing-whitespace nil)
                  (auto-complete-mode t)))
      (add-hook 'sql-mode-hook
                (lambda ()
                  (setq-local ac-ignore-case t)
                  (auto-complete-mode)))
    #+END_SRC
* Treemacs
** Initial setup
   # #+BEGIN_SRC emacs-lisp
   #   (use-package treemacs
   #     :ensure t
   #     :defer t
   #     :init
   #     (with-eval-after-load 'winum
   #       (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
   #     :config
   #     (progn
   #       (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
   #             treemacs-deferred-git-apply-delay   0.5
   #             treemacs-display-in-side-window     t
   #             treemacs-file-event-delay           5000
   #             treemacs-file-follow-delay          0.2
   #             treemacs-follow-after-init          t
   #             treemacs-follow-recenter-distance   0.1
   #             treemacs-goto-tag-strategy          'refetch-index
   #             treemacs-indentation                2
   #             treemacs-indentation-string         " "
   #             treemacs-is-never-other-window      nil
   #             treemacs-no-png-images              nil
   #             treemacs-project-follow-cleanup     nil
   #             treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
   #             treemacs-recenter-after-file-follow nil
   #             treemacs-recenter-after-tag-follow  nil
   #             treemacs-show-hidden-files          t
   #             treemacs-silent-filewatch           nil
   #             treemacs-silent-refresh             nil
   #             treemacs-sorting                    'alphabetic-desc
   #             treemacs-space-between-root-nodes   t
   #             treemacs-tag-follow-cleanup         t
   #             treemacs-tag-follow-delay           1.5
   #             treemacs-width                      35)
   #       ;; The default width and height of the icons is 22 pixels. If you are
   #       ;; using a Hi-DPI display, uncomment this to double the icon size.
   #       ;;(treemacs-resize-icons 44)      
 
   #       (treemacs-follow-mode t)
   #       (treemacs-filewatch-mode t)
   #       (treemacs-fringe-indicator-mode t)
   #       (pcase (cons (not (null (executable-find "git")))
   #                    (not (null (executable-find "python3"))))
   #         (`(t . t)
   #          (treemacs-git-mode 'extended))
   #         (`(t . _)
   #          (treemacs-git-mode 'simple))))
   #     :bind
   #     (:map global-map
   #           ("M-0"       . treemacs-select-window)
   #           ("C-x t 1"   . treemacs-delete-other-windows)
   #           ("C-x t t"   . treemacs)
   #           ("C-x t B"   . treemacs-bookmark)
   #           ("C-x t C-t" . treemacs-find-file)
   #           ("C-x t M-t" . treemacs-find-tag)))

   #   ;; (use-package treemacs-projectile
   #   ;;   :after treemacs projectile
   #   ;;   :ensure t)
   # #+END_SRC
* Evil Mode
** Set up evil mode on loading of buffers
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t)
     (evil-mode t)
   #+END_SRC

   #+RESULTS:
   : t
* Neotree
** Setup
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t)
   #+END_SRC

   #+RESULTS:

** Set Hotkey to bring up neotree
   #+BEGIN_SRC emacs-lisp
     (global-set-key [f8] 'neotree-toggle) 
   #+END_SRC

   #+RESULTS:
   : neotree-toggle

** Evil Mode bindings
   #+BEGIN_SRC emacs-lisp
     (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
     (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
     (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
     (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
     (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
     (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
     (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
     (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
     (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
   #+END_SRC

   #+RESULTS:

* Org Mode
** Set up Org mode faces
   #+BEGIN_SRC emacs-lisp
     (defface org-block-begin-line
       '((t (:underline "#A7A6AA" :foreground "#b5d2e0" :background "#626268")))
       "Face used for the line delimiting the begin of source blocks.")

     (defface org-block-background
       '((t (:background "#FFFFEA")))
       "Face used for the source block background.")

     (defface org-block-end-line
       '((t (:overline "#A7A6AA" :foreground "#b5d2e0" :background "#626268")))
       "Face used for the line delimiting the end of source blocks.")
   #+END_SRC
** Set up org bullets
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC
** Org-mode source code languages
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((python . t)
        (sql . t)
        (ruby . t)
        (sh . t)))
   #+END_SRC

   #+RESULTS:

** Org-mode syntax highlighting
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
   #+END_SRC
** Auto save markdown file with org files
   #+BEGIN_SRC emacs-lisp
     (use-package auto-org-md
       :ensure t)
     (require 'auto-org-md)
   #+END_SRC
** Add Skeleton to base all org-mode files on
   #+BEGIN_SRC emacs-lisp
     (define-skeleton org-header-skeleton
       "Header info for a emacs-org file."
       "Title: "
       "#+TITLE: " (read-string "What is the title? ") " \n"
       "#+AUTHOR: Jordan Garrison\n"
       "#+email: jordan.garrison@gm.com\n"
       "#+OPTIONS: ^:nil num:nil\n"
       "#+INFOJS_OPT: view:" (read-string "View (options are info,overview,conent,showall): ") " sdepth:1 toc:i mouse:\n"
       "#+PROPERTY: header-args :exports both :eval never-export\n"
       "\n"
       )
     (global-set-key [C-S-f4] 'org-header-skeleton)
   #+END_SRC

   #+RESULTS:
   : org-header-skeleton

** Set up auto execution of code
   #+BEGIN_SRC emacs-lisp
     (setq org-confirm-babel-evaluate nil)
   #+END_SRC
** Set up async execution of src code blocks

